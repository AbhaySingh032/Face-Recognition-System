# -*- coding: utf-8 -*-
"""face_recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N0wQUEFsZdhTjx6ayppX4BsnyvTy-D8Q
"""

from google.colab import files
uploaded=files.upload()

import zipfile

zip_path = "archive.zip"
extract_path = "5-celebrity-faces-dataset"

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

!pip install numpy opencv-python pillow mtcnn keras scikit-learn matplotlib

!pip install tensorflow

import os
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from mtcnn import MTCNN
from keras_facenet import FaceNet
from sklearn.preprocessing import LabelEncoder, Normalizer
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score, ConfusionMatrixDisplay

def extract_face(filename, required_size=(160, 160)):
    image = Image.open(filename).convert('RGB')
    pixels = np.asarray(image)
    detector = MTCNN()
    results = detector.detect_faces(pixels)
    if len(results) == 0:
        return None
    x1, y1, width, height = results[0]['box']
    x1, y1 = abs(x1), abs(y1)
    x2, y2 = x1 + width, y1 + height
    face = pixels[y1:y2, x1:x2]
    face_image = Image.fromarray(face)
    face_image = face_image.resize(required_size)
    return np.asarray(face_image)

"""##Loading Data"""

def load_dataset(directory):
    X, y = [], []
    for subdir in os.listdir(directory):
        path = os.path.join(directory, subdir)
        if not os.path.isdir(path):
            continue
        for filename in os.listdir(path):
            img_path = os.path.join(path, filename)
            face = extract_face(img_path)
            if face is not None:
                X.append(face)
                y.append(subdir)
    return np.array(X), np.array(y)

def plot_example_faces(X, y, class_names, n_examples=3):
    plt.figure(figsize=(12, 6))
    for idx, class_name in enumerate(class_names):
        i = 1
        shown = 0
        for img, label in zip(X, y):
            if label == class_name and shown < n_examples:
                plt.subplot(len(class_names), n_examples, idx*n_examples + i)
                plt.imshow(img)
                plt.title(class_name)
                plt.axis('off')
                i += 1
                shown += 1
    plt.suptitle("Example Faces from Each Class")
    plt.show()

print("Loading train set...")
trainX, trainy = load_dataset('5-celebrity-faces-dataset/train/')
print("Loading test set...")
testX, testy = load_dataset('5-celebrity-faces-dataset/val/')
print('Train:', trainX.shape, trainy.shape, 'Test:', testX.shape, testy.shape)

"""##Visualization of Example Faces"""

class_names = sorted(list(set(trainy)))
plot_example_faces(trainX, trainy, class_names)

"""##Face Embeddings with keras-facenet

"""

embedder = FaceNet()
print("Generating embeddings for train set...")
train_embeddings = embedder.embeddings(trainX)
print("Generating embeddings for test set...")
test_embeddings = embedder.embeddings(testX)

"""##Normalize and Encode Labels"""

in_encoder = Normalizer(norm='l2')
train_embeddings = in_encoder.transform(train_embeddings)
test_embeddings = in_encoder.transform(test_embeddings)

out_encoder = LabelEncoder()
out_encoder.fit(trainy)
trainy_enc = out_encoder.transform(trainy)
testy_enc = out_encoder.transform(testy)

"""##Train SVM Classifier"""

model = SVC(kernel='linear', probability=True)
model.fit(train_embeddings, trainy_enc)

"""##Training and Test Accuracy"""

yhat_train = model.predict(train_embeddings)
train_acc = accuracy_score(trainy_enc, yhat_train)
print(f"Training Accuracy: {train_acc:.3f}")

yhat_test = model.predict(test_embeddings)
test_acc = accuracy_score(testy_enc, yhat_test)
print(f"Test Accuracy: {test_acc:.3f}")

print(classification_report(testy_enc, yhat_test, target_names=out_encoder.classes_))

"""##Confusion Matrix Visualization"""

ConfusionMatrixDisplay.from_predictions(
    testy_enc, yhat_test, display_labels=out_encoder.classes_, cmap=plt.cm.Blues
)
plt.title("Confusion Matrix (Test Set)")
plt.show()